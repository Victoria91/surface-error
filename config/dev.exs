import Config

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we use it
# with webpack to recompile .js and .css sources.
config :surface_error, SurfaceErrorWeb.Endpoint,
  # url: [host: System.get_env("SURFACE_ERROR_HOSTNAME"), port: System.get_env("PORT", "4000")],
  http: [ip: {127, 0, 0, 1}, port: System.get_env("PORT", "4000") |> String.to_integer()],
  static_url: [
    scheme: System.get_env("SURFACE_ERROR_CDN_SCHEME", "http"),
    host: System.get_env("SURFACE_ERROR_CDN_HOSTNAME", "localhost"),
    port: System.get_env("SURFACE_ERROR_CDN_PORT", "4000") |> String.to_integer()
  ],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]},
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]}
  ],
  reloadable_compilers: [:phoenix, :elixir, :surface],
  live_reload: [
    patterns: [
      ~r"lib/surface_error_web/(live|surface)/.*(ex|js|sface)$",
      ~r"lib/surface_error/.*(ex)$",
      ~r"priv/catalogue/.*(ex)$",
      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/surface_error_web/(live|views)/.*(ex)$",
      ~r"lib/surface_error_web/templates/.*(eex)$"
    ]
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Note that this task requires Erlang/OTP 20 or later.
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime
